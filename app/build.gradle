apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

int MILLIS_IN_MINUTE = 1000 * 60
int minutesSinceEpoch = System.currentTimeMillis() / MILLIS_IN_MINUTE
android {
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId "com.hsb.gradlecompile"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //https://www.jianshu.com/p/39d7569237ed 打release包时禁止lint检查，打debug包时是默认是关闭的
//    lintOptions {
//        checkReleaseBuilds false
//        // Or, if you prefer, you can continue to check for errors in release builds,
//        // but continue the build even when errors are found:
//        abortOnError false
//    }

    //gradle命令查看构建性能 ./gradlew --profile --offline --rerun-tasks assembleDebug
    //AS 4.0 可以直接在Build-->Build Analyzer中看
    buildTypes {
        debug {
            debuggable true//默认为true
            applicationIdSuffix ".debug"
            minifyEnabled false
        }

        release {
            applicationIdSuffix ".release"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        dev {
            debuggable false//默认为false
            applicationIdSuffix ".dev"
            minifyEnabled false
            //解决 androidlib 不包含构建类型dev时报错的情况，matchingFallbacks 设置dev匹配 androidlib 的debug构建类型
            //如果 androidlib 存在app没有的构建类型也不会报错
            matchingFallbacks = ["debug"]
            //不加signingConfig 会没办法运行，跟debug是不一样的
            signingConfig signingConfigs.debug
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
        }

        staging{
            initWith debug
            applicationIdSuffix ".staging"
            matchingFallbacks = ["debug"]
        }
    }

    //1.app 和依赖库 androidlib 拥有相同的维度，但是app 存在依赖库所没有的变种(free)，那么也要使用 matchingFallbacks 来提供变种匹配
    //2.依赖库 androidlb2 拥有 app 所没有的维度"size"，当app要构建"freeDebug"版本时不知道该使用 androidlb2 的largeDebug还是normalDebug，
    //  使用 missingDimensionStrategy 'size','normal','large' 优先normal
    //所有变种都必须属于一个指定的变种维度，即一个产品变种组。您必须将所有变种分配给某个变种维度。
    // 如果给定的模块仅指定一个变种维度，则 Android Gradle 插件会自动将该模块的所有变种分配给该维度
    //产品变种支持与 defaultConfig 相同的属性
    flavorDimensions "tier","api"
    productFlavors {
        free {
            applicationIdSuffix ".free"
            dimension "tier"
            matchingFallbacks = ["demo", "other"]
//            resConfigs "zh", "xxhdpi"
            //当app切换至freeDev时，编译通过运行报错，但 missingDimensionStrategy 设置在 defaultConfig 中
            //时又不会报错；而且同样的配置当切换成freeDebug 运行又不会报错。。。。
            // 这个原因是没有pay中设置 missingDimensionStrategy 必须要所有的flavors中设置才行，这也是为什么
            // 只在 defaultConfig 中配置时运行又不会报错的原因。。。但为什么 freeDebug 运行又不会报错呢？-->
            //测试验证发现是因为dev中的debuggable 默认为false，这跟debug默认为true不一样
            missingDimensionStrategy 'size', 'normal', 'large'
        }
        pay {
            applicationIdSuffix ".pay"
            dimension "tier"
            missingDimensionStrategy 'size', 'large'
        }

        demo{
            dimension "tier"
            applicationIdSuffix ".demo"
            missingDimensionStrategy 'size', 'normal'
        }

        minApi21{
            dimension "api"
            minSdkVersion 21
            applicationIdSuffix ".api21"
            missingDimensionStrategy 'size', 'normal'
        }

        minApi23{
            dimension "api"
            minSdkVersion 23
            applicationIdSuffix ".api23"
            missingDimensionStrategy 'size', 'normal'
        }

    }

    //尽量只有release版本才使用软编码
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.versionNameOverride = minutesSinceEpoch + "-" + variant.flavorName
            }
        }
    }

    //过滤变体，如过滤掉demo-minApi21组合
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("minApi21") && names.contains("demo")) {
            setIgnore(true)
        }
    }

    //源代码集的代码和资源的顺序：变体>类型>产品变种>main>第三方依赖库
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar","*.aar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project("::androidlib")
    implementation project("::androidlb2")
    debugImplementation project("::kotlinlib")

    //compileOnly + implementation = api
    compileOnly 'com.gyf.immersionbar:immersionbar:3.0.0'

    implementation ('com.github.bumptech.glide:glide:4.11.0'){
        exclude group:"com.github.bumptech.glide",module:"gifdecoder"
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    //编译时依赖项的版本以运行时依赖项的版本为准，androidlib 库的依赖项版本最高，所以运行时依赖项的版本为4.8.0
    implementation "com.squareup.okhttp3:okhttp:4.7.0"

    implementation "com.android.support:multidex:1.0.3"
}